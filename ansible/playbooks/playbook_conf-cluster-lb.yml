- name: Настройка кластера Pacemaker
  hosts: loadbalancers
  become: yes
  tasks:
    - name: Установить Pacemaker и Corosync
      apt:
        name:
          - pacemaker
          - corosync
          - pcs
          - expect
        state: present
        update_cache: yes

    - name: Проверка установки Pacemaker и Corosync
      command: dpkg -l pacemaker corosync pcs expect
      register: install_check
    - debug:
        var: install_check.stdout_lines

    - name: Запустить pacemaker
      command: service pacemaker start
      register: pacemaker_start
    - debug:
        var: pacemaker_start

    - name: Запустить corosync
      command: service corosync start
      register: corosync_start
    - debug:
        var: corosync_start

    - name: Запустить pcsd
      command: service pcsd start
      register: pcsd_start
    - debug:
        var: pcsd_start

#    - name: Включить pcsd
#      command: systemctl enable pcsd
#      register: pcsd_enable
#    - debug:
#        var: pcsd_enable

    - name: Ensure /var/lib/pcsd directory exists
      file:
        path: /var/lib/pcsd
        state: directory
        owner: hacluster
        mode: '0755'

#    - name: Ensure known-hosts file exists
#      file:
#        path: /var/lib/pcsd/known-hosts
#        state: touch
#        owner: hacluster
#        group: hacluster
#        mode: '0755'

    - name: Generate SSH key pair for each host
      command: ssh-keygen -t rsa -b 2048 -f /root/.ssh/id_rsa -q -N ""
      args:
        creates: /root/.ssh/id_rsa

    - name: Get SSH public key
      command: cat /root/.ssh/id_rsa.pub
      register: ssh_pub_key

    - name: Add SSH key to known_hosts
      lineinfile:
        path: /var/lib/pcsd/known-hosts
        line: "{{ inventory_hostname }},{{ hostvars[inventory_hostname].ansible_host }} {{ ssh_pub_key.stdout }}"
        create: yes
        owner: hacluster
        mode: '0755'

    - name: Gather SSH host keys from all nodes
      command: ssh-keyscan -H {{ inventory_hostname }}
      register: ssh_keys

    - name: Check keyscan
      debug:
        var: ssh_keys

    - name: Add gathered SSH keys to known_hosts
      lineinfile:
        path: /var/lib/pcsd/known-hosts
        line: "{{ inventory_hostname }},{{ hostvars[inventory_hostname].ansible_host }} {{ ssh_keys.stdout }}"
        owner: hacluster
        mode: '0755'
      when: ssh_keys.stdout is defined and ssh_keys.stdout != ""
        

    - name: Ensure /var/lib/pcsd directory exists
      file:
        path: /var/lib/pcsd
        state: directory
        owner: hacluster
        mode: '0700'


    - name: Check known-hosts
      shell: cat /var/lib/pcsd/known-hosts
      register: cat_output

    - name: Print the file content
      debug:
        var: cat_output

    - name: Ensure correct permissions on known-hosts
      file:
        path: /var/lib/pcsd/known-hosts
        owner: hacluster
        mode: '0600'
    
    - name: Authenticate hacluster user on all nodes
      command: pcs cluster auth lb1 lb2 -u hacluster -p yourpassword
      register: auth_result

    - name: Check auth
      debug:
        var: auth_result

    - name: Запустить Pacemaker
      command: service pacemaker start
      register: pacemaker_start
    - debug:
        var: pacemaker_start

    - name: Убедиться, что Pacemaker запущен
      command: service pacemaker status
      register: pacemaker_status
      failed_when: pacemaker_status.rc not in [0, 3]  # Код 3 может быть "unknown state" но работающий сервис
    - debug:
        var: pacemaker_status

    - name: Настроить кластер
      command: pcs cluster setup --force clustering_lb lb1 lb2
      register: cluster_setup
    - debug:
        var: cluster_setup

    - name: Запустить кластер
      command: pcs cluster start --all
      register: cluster_start
    - debug:
        var: cluster_start

    - name: Включить кластер для автоматического запуска при загрузке
      command: pcs cluster enable --all
      register: cluster_enable
    - debug:
        var: cluster_enable

    - name: Настроить ресурс VIP
      command: pcs resource create vip ocf:heartbeat:IPaddr2 ip=10.0.0.100 cidr_netmask=24 op monitor interval=30s
      register: vip_resource
    - debug:
        var: vip_resource

    - name: Настроить ресурс Nginx
      command: pcs resource create nginx systemd:nginx op monitor interval=30s
      register: nginx_resource
    - debug:
        var: nginx_resource

    - name: Проверить статус кластера
      command: pcs status
      register: pcs_status
      failed_when: "'Connection refused' in pcs_status.stderr"
    - debug:
        var: pcs_status.stdout_lines
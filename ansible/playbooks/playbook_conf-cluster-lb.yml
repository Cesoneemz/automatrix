- name: Настройка кластера Pacemaker
  hosts: loadbalancers
  become: yes
  tasks:
    - name: Установить Pacemaker и Corosync
      apt:
        name:
          - pacemaker
          - corosync
          - pcs
          - expect
        state: present
        update_cache: yes

    - name: Проверка установки Pacemaker и Corosync
      command: dpkg -l pacemaker corosync pcs expect
      register: install_check
    - debug:
        var: install_check.stdout_lines

    - name: Запустить pcsd
      command: service pcsd start
      register: pcsd_start
    - debug:
        var: pcsd_start

    - name: Включить pcsd
      command: systemctl enable pcsd
      register: pcsd_enable
    - debug:
        var: pcsd_enable

    - name: Копировать скрипт для установки пароля
      copy:
        src: /ansible/playbooks/set_password.sh
        dest: /root/set_password.sh
        mode: '0755'
      register: copy_script
    - debug:
        var: copy_script

    - name: Установить пароль для пользователя hacluster
      command: /root/set_password.sh
      register: password_set
    - debug:
        var: password_set

    - name: Проверка пользователя hacluster
      command: id hacluster
      register: hacluster_check
    - debug:
        var: hacluster_check

    - name: Создать директорию для known-hosts
      file:
        path: /var/lib/pcsd
        state: directory
        mode: '0755'

    - name: Авторизовать узлы в кластере
      command: pcs host auth lb1 lb2 -u hacluster -p yourpassword
      register: host_auth
    - debug:
        var: host_auth

    - name: Запустить Pacemaker
      command: service pacemaker start
      register: pacemaker_start
    - debug:
        var: pacemaker_start

    - name: Убедиться, что Pacemaker запущен
      command: service pacemaker status
      register: pacemaker_status
      failed_when: pacemaker_status.rc not in [0, 3]  # Код 3 может быть "unknown state" но работающий сервис
    - debug:
        var: pacemaker_status

    - name: Настроить кластер
      command: pcs cluster setup --force clustering_lb lb1 lb2
      register: cluster_setup
    - debug:
        var: cluster_setup

    - name: Запустить кластер
      command: pcs cluster start --all
      register: cluster_start
    - debug:
        var: cluster_start

    - name: Включить кластер для автоматического запуска при загрузке
      command: pcs cluster enable --all
      register: cluster_enable
    - debug:
        var: cluster_enable

    - name: Настроить ресурс VIP
      command: pcs resource create vip ocf:heartbeat:IPaddr2 ip=10.0.0.100 cidr_netmask=24 op monitor interval=30s
      register: vip_resource
    - debug:
        var: vip_resource

    - name: Настроить ресурс Nginx
      command: pcs resource create nginx systemd:nginx op monitor interval=30s
      register: nginx_resource
    - debug:
        var: nginx_resource

    - name: Проверить статус кластера
      command: pcs status
      register: pcs_status
      failed_when: "'Connection refused' in pcs_status.stderr"
    - debug:
        var: pcs_status.stdout_lines